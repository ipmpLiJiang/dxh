package ${package.Controller};

import cc.mrbird.febs.common.annotation.Log;
import cc.mrbird.febs.common.controller.BaseController;
import cc.mrbird.febs.common.domain.router.VueRouter;
import cc.mrbird.febs.common.exception.FebsException;
import cc.mrbird.febs.common.domain.QueryRequest;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

import cc.mrbird.febs.common.utils.FebsUtil;
import cc.mrbird.febs.system.domain.User;
import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.wuwenze.poi.ExcelKit;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Validated
@RestController
@RequestMapping("${table.entityPath}")

public class ${table.controllerName} extends BaseController{

private String message;
@Autowired
public ${table.serviceName} i${entity}Service;

/**
 INSERT into t_menu(parent_id,menu_name,path,component,perms,icon,type,order_num,CREATE_time)
 VALUES (0,'$!{table.comment}','/dca/${entity}/${entity}','dca/${entity}/${entity}','${table.entityPath}:view','fork',0,1,NOW())
 SELECT MAX(MENU_ID) from t_menu;
 INSERT into t_menu(parent_id,MENU_NAME,perms,type,order_num,CREATE_time) VALUES(0,'$!{table.comment}新增','${table.entityPath}:add',1,1,NOW())
 INSERT into t_menu(parent_id,MENU_NAME,perms,type,order_num,CREATE_time) VALUES(0,'$!{table.comment}编辑','${table.entityPath}:update',1,1,NOW())
 INSERT into t_menu(parent_id,MENU_NAME,perms,type,order_num,CREATE_time) VALUES(0,'$!{table.comment}删除','${table.entityPath}:delete',1,1,NOW())
*/


/**
 * 分页查询数据
 *
 * @param  request 分页信息
 * @param ${table.entityPath} 查询条件
 * @return
 */
@GetMapping
@RequiresPermissions("${table.entityPath}:view")
public Map<String, Object> List(QueryRequest request, ${entity} ${table.entityPath}){
        return getDataTable(this.i${entity}Service.find${entity}s(request, ${table.entityPath}));
        }

/**
 * 添加
 * @param  ${table.entityPath}
 * @return
 */
@Log("新增/按钮")
@PostMapping
@RequiresPermissions("${table.entityPath}:add")
public void add${entity}(@Valid ${entity} ${table.entityPath})throws FebsException{
        try{
        User currentUser= FebsUtil.getCurrentUser();
        ${table.entityPath}.setCreateUserId(currentUser.getUserId());
        this.i${entity}Service.create${entity}(${table.entityPath});
        }catch(Exception e){
        message="新增/按钮失败" ;
        log.error(message,e);
        throw new FebsException(message);
        }
        }

/**
 * 修改
 * @param ${table.entityPath}
 * @return
 */
@Log("修改")
@PutMapping
@RequiresPermissions("${table.entityPath}:update")
public void update${entity}(@Valid ${entity} ${table.entityPath})throws FebsException{
        try{
        User currentUser= FebsUtil.getCurrentUser();
      ${table.entityPath}.setModifyUserId(currentUser.getUserId());
        this.i${entity}Service.update${entity}(${table.entityPath});
        }catch(Exception e){
        message="修改失败" ;
        log.error(message,e);
        throw new FebsException(message);
        }
        }


@Log("删除")
@DeleteMapping("/{ids}")
@RequiresPermissions("${table.entityPath}:delete")
public void delete${entity}s(@NotBlank(message = "{required}") @PathVariable String ids)throws FebsException{
        try{
        String[]arr_ids=ids.split(StringPool.COMMA);
        this.i${entity}Service.delete${entity}s(arr_ids);
        }catch(Exception e){
        message="删除失败" ;
        log.error(message,e);
        throw new FebsException(message);
        }
        }
@PostMapping("excel")
@RequiresPermissions("${table.entityPath}:export")
public void export(QueryRequest request, ${entity} ${table.entityPath}, HttpServletResponse response) throws FebsException {
        try {
        List<${entity}> ${table.entityPath}s = this.i${entity}Service.find${entity}s(request, ${table.entityPath}).getRecords();
        ExcelKit.$Export(${entity}.class, response).downXlsx(${table.entityPath}s, false);
        } catch (Exception e) {
        message = "导出Excel失败";
        log.error(message, e);
        throw new FebsException(message);
        }
        }

@GetMapping("/{id}")
public ${entity} detail(@NotBlank(message = "{required}") @PathVariable String id) {
    ${entity} ${table.entityPath}=this.i${entity}Service.getById(id);
        return ${table.entityPath};
        }
        }